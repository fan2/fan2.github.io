<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[col.dog]]></title>
  <subtitle><![CDATA[just do IT]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://col.dog/"/>
  <updated>2015-11-16T15:36:08.000Z</updated>
  <id>http://col.dog/</id>
  
  <author>
    <name><![CDATA[Thomas Fan]]></name>
    <email><![CDATA[phunxm@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于 Hexo 和 GitHub Pages 搭建博客]]></title>
    <link href="http://col.dog/2015/11/12/hello-world/"/>
    <id>http://col.dog/2015/11/12/hello-world/</id>
    <published>2015-11-12T11:27:00.000Z</published>
    <updated>2015-11-16T15:36:08.000Z</updated>
    <content type="html"><![CDATA[<p>本文详细记录了从安装 node.js / Hexo 到 使用 hexo 发布 markdown 格式的博客并托管到 GitHub 的全过程。</p>
<a id="more"></a>
<h2 id="配置环境">配置环境</h2><p>本文的操作流程和步骤基于 MacBook Pro + OS X EI Capitan 平台。</p>
<h2 id="安装_Node-js_+_NPM">安装 Node.js + NPM</h2><h3 id="什么是_Node-js_?">什么是 Node.js ?</h3><p><a href="http://nodejs.cn/" target="_blank" rel="external">Node.js</a> 是一个基于 <a href="https://developers.google.com/v8/" target="_blank" rel="external">Chrome V8</a> 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>，是全球最大的跨平台开源库生态系统。<br>正如 <a href="http://en.wikipedia.org/wiki/Nodejs" target="_blank" rel="external">维基百科</a> 所说：“Node.js 是谷歌 V8 引擎、libuv 平台抽象层以及主体使用 Javscript 编写的核心库三者集合的一个包装外壳。”   </p>
<blockquote>
<p>注：V8是谷歌开发的，目前公认最快的 Javascript 解析引擎；libuv 是一个开源的、为 Node 定制而生的跨平台异步 IO 库。</p>
</blockquote>
<p>Node.js 服务器端和网络应用程序是使用 JavaScript 脚本语言编写，并可以在 Mac OS X、Microsoft Windows 和 Linux 内的 Node.js 运行时运行。<br>Node.js还提供了丰富的各种模块的 <a href="http://nodeapi.ucdok.com/" target="_blank" rel="external">JavaScript</a> 库，从而简化了 Node.js 的使用，方便 Web 应用程序的研究与开发。</p>
<blockquote>
<p>Node.js = Runtime Environment + JavaScript Library</p>
</blockquote>
<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-nodejs/" target="_blank" rel="external">Node.js 究竟是什么？</a> <a href="http://blog.jobbole.com/53736/" target="_blank" rel="external">为什么要用 Node.js ?</a><br><a href="http://www.zhihu.com/question/19653241" target="_blank" rel="external">使用 Node.js 的优势和劣势都有哪些？</a> <a href="https://github.com/nodejs/node-v0.x-archive/wiki/Projects,-Applications,-and-Companies-Using-Node" target="_blank" rel="external">谁在使用 Node.js ?</a>  </p>
<h3 id="安装_Node-js">安装 Node.js</h3><p>可以到 <a href="https://nodejs.org/" target="_blank" rel="external">Node.js 官网</a> 上下载最新的 node-v5.0.0.pkg for OS X (x64) 安装包到本地进行安装。<br>也可以使用 brew（The missing package manager for OS X）包管理器命令行工具进行安装。  </p>
<h4 id="Homebrew">Homebrew</h4><p>brew 全称为 <a href="http://brew.sh/index.html" target="_blank" rel="external">Homebrew</a>，是 UNIX 上的软件包管理工具。  </p>
<blockquote>
<p>Homebrew  is  the easiest and most flexible way to install the UNIX tools.</p>
</blockquote>
<p>在终端使用 <code>brew -v</code> 或 <code>brew --version</code> 命令来查看 Mac 上安装的 Homebrew 版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  brew -v  &#10;Homebrew 0.9.5 (git revision 9cbe8; last commit 2015-11-08)</span><br></pre></td></tr></table></figure>
<p>如果没有安装 brew，可在 <a href="http://blog.csdn.net/delphiwcdj/article/details/19679891" target="_blank" rel="external">Mac 上安装 Homebrew</a> <a href="http://blog.csdn.net/aaawqqq/article/details/44088141" target="_blank" rel="external">使 OS X 更完整</a>。</p>
<h4 id="brew_install_node">brew install node</h4><p>执行 <code>brew install node</code> 命令使用 brew 安装 node，提示不能创建 <code>/usr/local/Cellar</code> 目录，原因是没有 <code>/usr/local</code> 的写权限。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  brew install node&#10;Error: Could not create /usr/local/Cellar&#10;Check you have permission to write to /usr/local</span><br></pre></td></tr></table></figure>
<p><strong><a href="http://segmentfault.com/q/1010000000505091" target="_blank" rel="external">解决方法</a>：</strong></p>
<blockquote>
<p>执行 <code>chown</code> 命令改变 <code>/usr/local</code> 的所有者为 <code>whoami</code> ，<code>-R</code> 表示递归（Recursive）。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  whoami&#10;faner&#10;&#10;&#10140;  ~  sudo chown -R faner /usr/local&#10;&#10140;  ~  brew install node&#10;==&#62; Downloading https://homebrew.bintray.com/bottles/node-4.2.1.el_capitan.bottle.tar.gz&#10;######################################################################## 100.0%&#10;==&#62; Pouring node-4.2.1.el_capitan.bottle.tar.gz&#10;==&#62; Caveats&#10;Bash completion has been installed to:&#10;  /usr/local/etc/bash_completion.d&#10;==&#62; Summary&#10;&#127866;  /usr/local/Cellar/node/4.2.1: 2738 files, 36M</span><br></pre></td></tr></table></figure>
<p>node installed completion 之后，执行 <code>node -v</code> 命令可查看安装的 node.js 版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  node -v&#10;v4.2.1</span><br></pre></td></tr></table></figure>
<h4 id="npm">npm</h4><p>Node.js 默认内置了模块管理工具 —— NPM（Node Package Manager），其灵感来源于 <a href="http://www.cnblogs.com/ihojin/p/ruby-gem-update-the-latest-version.html" target="_blank" rel="external">RubyGems</a>（具有版本和依赖管理功能，可以通过在线资料库便捷安装可重用的组件的管理工具）。<br>NPM 生态系统向所有人开放，任何人都可以发布自己的模块，所有的模块都可以在 NPM 资料库中找到。一个完整的公用模块列表可以在 <a href="https:://npmjs.org/" target="_blank" rel="external">NPM 的网站</a> 上找到，也可以通过与 Node.js 一同安装的 NPM 客户端命令行工具访问。<br>可执行 <code>npm -v</code> 命令查看 <code>node.js</code> 集成的 npm 包管理工具的版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  npm -v&#10;2.14.7</span><br></pre></td></tr></table></figure>
<p>执行 <code>npm help</code> 命令可查看帮助：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  npm help&#10;&#10;Usage: npm &#60;command&#62;&#10;&#10;where &#60;command&#62; is one of:&#10;&#10;&#10;&#10;npm &#60;cmd&#62; -h     quick help on &#60;cmd&#62;&#10;npm -l           display full usage info&#10;npm faq          commonly asked questions&#10;npm help &#60;term&#62;  search for help on &#60;term&#62;&#10;npm help npm     involved overview&#10;&#10;Specify configs in the ini-formatted file:&#10;    /Users/faner/.npmrc&#10;or on the command line via: npm &#60;command&#62; --key value&#10;Config info can be viewed via: npm help config&#10;&#10;npm@2.14.7 /usr/local/lib/node_modules/npm</span><br></pre></td></tr></table></figure>
<p>执行 <code>npm -l</code> 命令可查看帮助详情。<br>下文将通过 <code>npm install &lt;pkg&gt;</code> 命令来安装快速、简洁且高效的博客框架——<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>，并基于 GitPages 托管来搭建免费开源博客。</p>
<h2 id="NPM_安装_hexo">NPM 安装 hexo</h2><h3 id="npm_install_hexo">npm install hexo</h3><p>执行 <code>npm install -g hexo</code> 命令安装 hexo：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  npm install -g hexo&#10;&#10;&#62; fsevents@0.3.8 install /usr/local/lib/node_modules/hexo/node_modules/nunjucks/node_modules/chokidar/node_modules/fsevents&#10;&#62; node-gyp rebuild&#10;&#10;&#62; dtrace-provider@0.6.0 install /usr/local/lib/node_modules/hexo/node_modules/bunyan/node_modules/dtrace-provider&#10;&#62; node scripts/install.js&#10;&#10;&#10;&#62; fsevents@1.0.5 install /usr/local/lib/node_modules/hexo/node_modules/hexo-fs/node_modules/chokidar/node_modules/fsevents&#10;&#62; node-pre-gyp install --fallback-to-build&#10;&#10;[fsevents] Success: &#34;/usr/local/lib/node_modules/hexo/node_modules/hexo-fs/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node&#34; is installed via remote&#10;/usr/local/bin/hexo -&#62; /usr/local/lib/node_modules/hexo/bin/hexo&#10;hexo@3.1.1 /usr/local/lib/node_modules/hexo</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<blockquote>
<p>npm默认为当前项目安装，<code>-g</code> 表示全局安装。</p>
</blockquote>
<h3 id="hexo_version">hexo version</h3><p>可执行 <code>hexo -v</code> 或  <code>hexo -version</code> 命令来检验安装的 hexo 版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  hexo -v&#10;hexo-cli: 0.1.8&#10;os: Darwin 15.0.0 darwin x64&#10;http_parser: 2.5.0&#10;node: 4.2.1&#10;v8: 4.5.103.35&#10;uv: 1.7.5&#10;zlib: 1.2.8&#10;ares: 1.10.1-DEV&#10;icu: 56.1&#10;modules: 46&#10;openssl: 1.0.2d</span><br></pre></td></tr></table></figure>
<h3 id="hexo_help">hexo help</h3><p>可执行 <code>hexo --help</code> 查看帮助：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  hexo --help&#10;Usage: hexo &#60;command&#62;&#10;&#10;Commands:&#10;  help     Get help on Hexo.&#10;  init     Create a new Hexo folder.&#10;  version  Display version information.&#10;&#10;Global Options:&#10;  --config  Specify config file instead of using _config.yml&#10;  --cwd     Specify the CWD&#10;  --debug   Display all verbose messages in the terminal&#10;  --safe    Disable all plugins and scripts&#10;  --silent  Hide output on console&#10;&#10;For more help, you can use &#39;hexo help [command]&#39; for the detailed information&#10;or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>
<p><strong>常用的 hexo 命令：</strong></p>
<ul>
<li>hexo init <code>&lt;blog&gt;</code> ：</li>
<li>hexo n == hexo new</li>
<li>hexo g == hexo generate</li>
<li>hexo d == hexo deploy</li>
<li>hexo s == hexo server</li>
<li>hexo clean</li>
</ul>
<p><strong>hexo 在线帮助文档：</strong></p>
<ul>
<li><a href="http://hexo.io/docs/" target="_blank" rel="external">http://hexo.io/docs/</a></li>
</ul>
<h2 id="hexo_init">hexo init</h2><p>假设我们接下来将在本地工程目录 <code>Projects/git/blog</code> 下构建博客站点（WebSite）。<br>cd 进入 <code>Projects/git/blog</code> 目录，针对该目录执行 <code>hexo init</code> 命令。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  cd Projects/git&#10;&#10140;  git  mkdir blog&#10;&#10140;  git  cd blog&#10;&#10140;  blog  hexo init&#10;INFO  Copying data to ~/Projects/git/blog&#10;INFO  You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!</span><br></pre></td></tr></table></figure>
<h3 id="博客模板">博客模板</h3><p><code>hexo init</code> 初始化成功后，可调用 <code>ls</code> 或 <a href="http://www.aikaiyuan.com/5413.html" target="_blank" rel="external"><code>tree</code></a> 命令查看 hexo 在 blog 目录下生成的模板文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog  ls&#10;_config.yml  package.json scaffolds    source       themes&#10;&#10140;  blog  tree -L 2&#10;.&#10;&#9500;&#9472;&#9472; _config.yml&#10;&#9500;&#9472;&#9472; package.json&#10;&#9500;&#9472;&#9472; scaffolds&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; draft.md&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; page.md&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; post.md&#10;&#9500;&#9472;&#9472; source&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; _posts&#10;&#9492;&#9472;&#9472; themes&#10;    &#9492;&#9472;&#9472; landscape&#10;&#10;5 directories, 5 files</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>文件/目录</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>_config.yml</td>
<td>网站的配置信息</td>
</tr>
<tr>
<td>package.json</td>
<td>应用程序的信息，包括依赖包(dependencies)</td>
</tr>
<tr>
<td>scaffolds</td>
<td>模板文件夹，Hexo 会根据 scaffold 来新建文件。</td>
</tr>
<tr>
<td>source</td>
<td>资源文件夹，<code>_post</code> 目录存放博客源码（markdown文件）</td>
</tr>
<tr>
<td>themes</td>
<td>主题文件夹，默认主题为landscape</td>
</tr>
</tbody>
</table>
<p><code>source</code> 下除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件 将会被忽略。<code>/source/_posts</code> 目录下默认有一个欢迎页 —— <code>hello-world.md</code> 文件。<br>在下文使用 <code>hexo generate</code> 生成网站时，Hexo 会编译 Markdown 和 HTML 源文件，根据主题来生成静态页面。静态页面文件将会被存放到 <code>public</code> 文件夹，而其他文件会被拷贝过去视作资源。</p>
<h3 id="npm_install">npm install</h3><p>此时，尝试执行 <code>hexo generate</code> 生成包含 Hello World 首页的博客，将提示需要执行<br><code>npm install hexo --save</code> :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog  hexo generate&#10;ERROR Local hexo not found in ~/Projects/git/blog&#10;ERROR Try running: &#39;npm install hexo --save&#39;</span><br></pre></td></tr></table></figure>
<p>实际上，我们已经执行过 <code>npm install hexo</code> 。根据上一步 <code>hexo init</code> 的提示，在正式 blogging with Hexo 之前，需要执行 <code>npm install</code> 命令安装 <code>package.json</code> 里的依赖包（Dependencies）：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  blog  hexo <span class="keyword">generate</span></span><br><span class="line"><span class="keyword">ERROR</span> <span class="keyword">Local</span> hexo not found <span class="keyword">in</span> ~/Projects/git/blog</span><br><span class="line"><span class="keyword">ERROR</span> Try running: 'npm install hexo --<span class="keyword">save</span>'</span><br><span class="line"></span><br><span class="line">➜  blog  npm install</span><br><span class="line"></span><br><span class="line">➜  blog  <span class="keyword">ls</span></span><br><span class="line">_config.yml  node_modules package.json scaffolds    source       themes</span><br></pre></td></tr></table></figure>
<p><code>ls</code> 可以查看到目录下将多出 <code>node_modules</code> 文件夹，其中存放 <code>npm install</code> 安装的依赖包。</p>
<h2 id="hexo_generate">hexo generate</h2><p>上面，我们在执行 <code>hexo init</code> 后，再执行 <code>npm install</code> 安装了 package.json 所依赖的包。此时，执行 <code>hexo generate</code> 命令将编译（只有欢迎页：<code>hello-world.md</code>）生成待发布的博客文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog  hexo generate&#10;INFO  Files loaded in 290 ms&#10;INFO  Generated: js/script.js&#10;INFO  Generated: fancybox/jquery.fancybox.pack.js&#10;INFO  Generated: fancybox/jquery.fancybox.js&#10;INFO  Generated: fancybox/jquery.fancybox.css&#10;INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js&#10;INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css&#10;INFO  Generated: fancybox/helpers/jquery.fancybox-media.js&#10;INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js&#10;INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css&#10;INFO  Generated: fancybox/helpers/fancybox_buttons.png&#10;INFO  Generated: fancybox/fancybox_sprite@2x.png&#10;INFO  Generated: fancybox/fancybox_sprite.png&#10;INFO  Generated: fancybox/fancybox_overlay.png&#10;INFO  Generated: fancybox/fancybox_loading@2x.gif&#10;INFO  Generated: fancybox/fancybox_loading.gif&#10;INFO  Generated: fancybox/blank.gif&#10;INFO  Generated: css/style.css&#10;INFO  Generated: css/images/banner.jpg&#10;INFO  Generated: css/fonts/fontawesome-webfont.woff&#10;INFO  Generated: css/fonts/fontawesome-webfont.ttf&#10;INFO  Generated: css/fonts/fontawesome-webfont.svg&#10;INFO  Generated: css/fonts/fontawesome-webfont.eot&#10;INFO  Generated: css/fonts/FontAwesome.otf&#10;INFO  Generated: 2015/11/08/hello-world/index.html&#10;INFO  Generated: archives/index.html&#10;INFO  Generated: archives/2015/index.html&#10;INFO  Generated: archives/2015/11/index.html&#10;INFO  Generated: index.html&#10;INFO  28 files generated in 794 ms&#10;&#10140;  blog  ls&#10;_config.yml  node_modules public       source&#10;db.json      package.json scaffolds    themes</span><br></pre></td></tr></table></figure>
<p><code>ls</code> 查看目录下将生成 <code>public</code> 和 <code>db.json</code> 这两个文件夹。</p>
<ol>
<li><code>db.json</code> —— json格式的静态常量数据库。  </li>
<li><code>public</code> 文件夹存放编译后的静态网站（html+css+js），也就是最后要发布的博客。  </li>
</ol>
<h3 id="public">public</h3><p>在 public 目录下执行 <code>tree -L 2</code>，可以查看其目录结构：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog  cd public &#10;&#10140;  public  tree -L 2&#10;.&#10;&#9500;&#9472;&#9472; 2015&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; 11&#10;&#9500;&#9472;&#9472; archives&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; 2015&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; index.html&#10;&#9500;&#9472;&#9472; css&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fonts&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; images&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; style.css&#10;&#9500;&#9472;&#9472; fancybox&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; blank.gif&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fancybox_loading.gif&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fancybox_loading@2x.gif&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fancybox_overlay.png&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fancybox_sprite.png&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; fancybox_sprite@2x.png&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; helpers&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; jquery.fancybox.css&#10;&#9474;&#160;&#160; &#9500;&#9472;&#9472; jquery.fancybox.js&#10;&#9474;&#160;&#160; &#9492;&#9472;&#9472; jquery.fancybox.pack.js&#10;&#9500;&#9472;&#9472; index.html&#10;&#9492;&#9472;&#9472; js&#10;    &#9492;&#9472;&#9472; script.js</span><br></pre></td></tr></table></figure>
<ul>
<li><code>index.html</code> 为网站首页。</li>
<li><code>js/</code> ：存放 hexo 的功能 js。</li>
<li><code>css/</code> ：存放 css 样式文件。</li>
<li><code>archives/</code> ：存放博客归档。</li>
<li>[<code>fancybox</code>][] 是一款优秀的 <a href="http://www.cnblogs.com/zhmt/archive/2011/10/06/2200152.html" target="_blank" rel="external">jquery 插件</a>，它能够展示<a href="http://www.helloweba.com/view-blog-65.html" target="_blank" rel="external">丰富的弹出层效果</a>。</li>
</ul>
<h2 id="hexo_server">hexo server</h2><p>上面通过 <code>init</code> 和 <code>generate</code> 之后，已经生成博客网站了。此时，只包含一个默认首页 hello-world.md。  </p>
<p>执行 <code>hexo server</code> 可启动 <strong>hexo server</strong> 进行本地调试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog  hexo server&#10;INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.&#10;^CINFO  Bye!&#10;&#10140;  blog</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入 <code>http://localhost:4000</code> 即可访问只含欢迎页和默认主题的 hexo 博客了。<br><img src="hexo-hello_world.png" alt="hexo-hello_world"></p>
<p>按下 <code>Ctrl+C</code> 退出 hexo 服务器。</p>
<h2 id="hexo_deploy">hexo deploy</h2><h3 id="配置_Deployment">配置 Deployment</h3><p>修改 <code>_config.yml</code> 文件里面的 Deployment 发布配置。<br>其中 deploy type 修改为 <code>github</code>；repository 修改为自己在 Github 上的 User Pages 的地址：<code>https://github.com/fan2/fan2.github.io.git</code> 。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Deployment&#10;## Docs: http://hexo.io/docs/deployment.html&#10;deploy:&#10;  type: github&#10;  repository: git@github.com:fan2/fan2.github.io.git&#10;  branch: master</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ol>
<li>Repository：url 必须是 SSH 形式的，不支持 HTTPS 形式，否则会出现错误：<code>is not a valid repositor URL!</code>。  </li>
<li><p>使用 SSH url，如果电脑没有开放 SSH 端口，会致部署失败：</p>
<blockquote>
<p>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p>
</blockquote>
</li>
<li><p>如果是为一个项目制作介绍网站，那么需要把 branch 设置为 gh-pages 。</p>
</li>
</ol>
<h3 id="hexo_deploy-1">hexo deploy</h3><p>执行 <code>hexo deploy</code> ，将静态网站代码（public/*）上传到 github 上。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog hexo deploy&#10;ERROR Deployer not found: github</span><br></pre></td></tr></table></figure>
<p>原因是在 hexo 3.0 之后, 不仅 github 的 deploy 的 type 从 github 改为了 git，其中的 deploy 功能也被单独做成一个模块，需要另外安装。所以我们需要安装 <strong>hexo-deployer-git</strong>。</p>
<p><strong>解决方案：</strong></p>
<ol>
<li><a href="http://www.v2ex.com/t/175940" target="_blank" rel="external">将 <code>github</code> 修改为 <code>git</code></a>， 还是报错；</li>
<li><a href="http://blog.163.com/gis_warrior/blog/static/19361717320153100184696/" target="_blank" rel="external">安装 <code>hexo-deployer-git</code></a>:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog npm install hexo-deployer-git --save&#10; &#10;&#62; fsevents@1.0.5 install /Users/faner/Projects/git/blog/node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/fsevents&#10;&#62; node-pre-gyp install --fallback-to-build&#10;&#10;[fsevents] Success: &#34;/Users/faner/Projects/git/blog/node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node&#34; is installed via remote</span><br></pre></td></tr></table></figure>
<p>其中 <code>--save</code> 参数用于把模块的版本号添加到 package.json 文件中的依赖里（dependencies），否则在安装完之后需要手动添加。<br>下载安装完成后，<code>node_modules</code> 下将新增目录 <code>hexo-deployer-git</code>。</p>
<p>此时，重新执行 <code>hexo deploy</code> ，提交发布成功！</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  blog hexo deploy                         &#10;INFO  Deploying: git&#10;INFO  Setting up Git deployment...&#10;Initialized empty Git repository in /Users/faner/Projects/git/blog/.deploy_git/.git/&#10;[master (root-commit) 578b537] First commit&#10; 1 file changed, 0 insertions(+), 0 deletions(-)&#10; create mode 100644 placeholder&#10;INFO  Clearing .deploy folder...&#10;INFO  Copying files from public folder...&#10;&#10;&#10;&#10;To git@github.com:fan2/fan2.github.io.git&#10; + 9a3d901...6fe0445 master -&#62; master (forced update)&#10;Branch master set up to track remote branch master from git@github.com:fan2/fan2.github.io.git.&#10;INFO  Deploy done: git</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ol>
<li>部署会覆盖掉你之前在版本库 <code>fan2.github.io</code> 中存放的文件。  </li>
<li><code>hexo deploy</code> 时将在博客根目录下生成 <code>.deploy_git</code> 文件夹，下一次 <code>hexo deploy</code> 将会基于 diff 提交差异量。</li>
</ol>
<h2 id="图片存储">图片存储</h2><p>在 <code>source</code> 下建立与博客 <code>blog.md</code> 同名的目录 <code>blog</code> ，用于存放图片等资源文件，首页相对引用成功；但点击进入文章，相对引用失败！<br>可参照 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">hexo 资源文件夹</a> ，看看如何设置 asset 相对路径。也可采用<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛</a>等云存储平台做图床，使用绝对路径。</p>
<h2 id="更新博客">更新博客</h2><p>新建博文，其中 postName 是博文题目：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#34;postName&#34;</span><br></pre></td></tr></table></figure>
<p>hexo 会自动在博客目录 <code>source/_posts</code> 下生成 postName.md 文件。</p>
<p>每次修改更新本地博客源码文件后，需要针对该博客目录执行 <code>hexo generate</code> 重新（增量）编译；再键入 <code>hexo deploy</code> 即可上传到 Github 上。这两步也可合并为 <code>hexo d -g</code> ，先生成再部署。<br>如果 SSH 被禁用了，建议手动将 <code>public/</code> 目录下的静态网站 git push 到 GitHub Pages 博客仓库上。</p>
<h2 id="<!-以下是本文的脚注和超链接->"><!--以下是本文的脚注和超链接--></h2>]]></content>
    <summary type="html">
    <![CDATA[<p>本文详细记录了从安装 node.js / Hexo 到 使用 hexo 发布 markdown 格式的博客并托管到 GitHub 的全过程。</p>]]>
    
    </summary>
    
      <category term="博客志" scheme="http://col.dog/tags/%E5%8D%9A%E5%AE%A2%E5%BF%97/"/>
    
      <category term="Hexo" scheme="http://col.dog/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[坳口]]></title>
    <link href="http://col.dog/2015/11/08/col/"/>
    <id>http://col.dog/2015/11/08/col/</id>
    <published>2015-11-08T12:04:46.000Z</published>
    <updated>2015-11-13T00:10:12.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col 英[kɒ<span class="keyword">l</span>] 美[kɑ:<span class="keyword">l</span>]</span><br><span class="line"><span class="keyword">n</span>.	坳; 山口; 关口，峡路，关隘; 山坞;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xo5uz.com1.z0.glb.clouddn.com/coltree.jpg" alt="一棵被遗弃在坳口上的树"></p>
<a id="more"></a>
<p>记忆中的坳口<br>风总是很大<br>翻过坳口<br>就是我们的家</p>
<p>站在坳口<br>能眺望远方的世界<br>能望见田野的油菜花<br>那袅袅升起的炊烟<br>不知是哪家厨房里<br>正在忙碌的妈妈</p>
<p>翻山越岭到坳口<br>熄灭咆哮一路的汽车火花<br>欢快的车轱辘一路空档向下<br>满载一路的团圆梦<br>驶向温暖的家</p>
<p>汽车开出了坳口<br>我们便在路上向别处奋发<br>回去吧爸爸妈妈<br>寒来暑往中<br>我们渐渐长大</p>
<p>而如今<br>在那迎来送往的坳口<br>葬着我的爸爸<br>只有那棵二叉香樟树<br>和那春风吹又生的野草<br>日夜陪伴着他</p>
<hr>

<p>– 2012.12</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col 英[kɒ<span class="keyword">l</span>] 美[kɑ:<span class="keyword">l</span>]</span><br><span class="line"><span class="keyword">n</span>.	坳; 山口; 关口，峡路，关隘; 山坞;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xo5uz.com1.z0.glb.clouddn.com/coltree.jpg" alt="一棵被遗弃在坳口上的树"></p>]]>
    
    </summary>
    
      <category term="坳口" scheme="http://col.dog/tags/%E5%9D%B3%E5%8F%A3/"/>
    
      <category term="故乡" scheme="http://col.dog/categories/%E6%95%85%E4%B9%A1/"/>
    
  </entry>
  
</feed>
